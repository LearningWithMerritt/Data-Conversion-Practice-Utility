{
    "binary_conversion_assignment_hash": "b27e4adf20dc7c72f11bf68e180cec0053d6b6c443358472ec347be840074aa7",
    "hexadecimal_conversion_assignment_hash": "9783dd87e750459d344e0b38a4d3c947c06b3b024b348f762dfa8eedd87c921b",
    "ascii_conversion_assignment_hash": "8227d00b94b0ed4b4f89fcc1fe20213984f7c1117753859d38dbe1ff73c81421",
    "ascii_conversion.py": "",
    "binary_conversion.py": "",
    "hexadecimal_conversion.py": "",
    "__init__.py": "",
    "binary_conversion_save": {},
    "hexadecimal_conversion_save": {},
    "ascii_conversion_save": {}
}